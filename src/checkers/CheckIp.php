<?php


namespace Drachenkatze\ZoneChecker\Checkers;


use PhpIP\IP;
use PhpIP\IPBlock;
use PhpIP\IPv4;
use PhpIP\IPv4Block;
use PhpIP\IPv6;

class CheckIp extends AbstractChecker
{
    private $ownIPs = [];

    public static function canHandle(string $checkerType)
    {
        if ($checkerType == "check_ip") {
            return true;
        }

        return false;
    }

    public function setConfig(array $config)
    {
        parent::setConfig($config); // TODO: Change the autogenerated stub

        if(array_key_exists("own_ips",$config)) {
            $this->ownIPs = $config["own_ips"];
        }
    }




    public function check()
    {
        $targetIps = [];
        if ($this->resourceRecord->getType() == "A" || $this->resourceRecord->getType() == "AAAA") {
            $targetIps[] = $this->resourceRecord->getRdata()->toText();
        }

        if ($this->resourceRecord->getType() == "CNAME") {
            $results = dns_get_record($this->getCNameFQDN());

            foreach ($results as $result) {
                if ($result["type"] == "A") {
                    $targetIps[] = $result["ip"];
                }

                if ($result["type"] == "AAAA") {
                    $targetIps[] = $result["ipv6"];
                }
            }
        }

        if (count($targetIps) == 0) {
            throw new \Exception("TODO");

        }

        foreach ($targetIps as $targetIp) {
            $checkIp = IP::create($targetIp);

            foreach ($this->ownIPs as $ip) {
                try {
                    $ipClass = IP::create($ip);

                    if ($ipClass->binary() == $checkIp->binary()) {
                        return;
                    }
                } catch (\InvalidArgumentException $e) {

                }

                try {
                    $ipClass = IPBlock::create($ip);

                    if ($checkIp->isIn($ipClass)) {
                        return;
                    }
                } catch (\InvalidArgumentException $e) {

                }

            }

            $ownedIPs = join(", ", $this->ownIPs);
            $this->logError("IP {$targetIp} is not within {$ownedIPs}");
        }

    }




}